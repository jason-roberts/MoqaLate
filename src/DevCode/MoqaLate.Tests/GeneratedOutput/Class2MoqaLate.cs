using MoqaLate.Tests.Integration.SampleFiles.a;
namespace MoqaLate.Autogenerated
{
public partial class Class2MoqaLate<T> : IClass2<T>
{
// ------------ Property Count
private int _Count;
public virtual int Count
{
get { return _Count; }
}
public virtual void __SetCount(int val)
{
   _Count = val;
}
// ------------ Property IsReadOnly
private bool _IsReadOnly;
public virtual bool IsReadOnly
{
get { return _IsReadOnly; }
}
public virtual void __SetIsReadOnly(bool val)
{
   _IsReadOnly = val;
}


// -------------- Add ------------


        private int _addNumberOfTimesCalled;        

        public T AddParameter_item_LastCalledWith;

        public virtual bool AddWasCalled()
{
   return _addNumberOfTimesCalled > 0;
}


public virtual bool AddWasCalled(int times)
{
   return _addNumberOfTimesCalled == times;
}


public virtual int AddTimesCalled()
{
   return _addNumberOfTimesCalled;
}


public virtual bool AddWasCalledWith(T item){
return (
item.Equals(AddParameter_item_LastCalledWith) );
}


        public void Add(T item)
        {
            _addNumberOfTimesCalled++;            

            AddParameter_item_LastCalledWith = item;
        }


// -------------- Clear ------------


        private int _clearNumberOfTimesCalled;        

        

        public virtual bool ClearWasCalled()
{
   return _clearNumberOfTimesCalled > 0;
}


public virtual bool ClearWasCalled(int times)
{
   return _clearNumberOfTimesCalled == times;
}


public virtual int ClearTimesCalled()
{
   return _clearNumberOfTimesCalled;
}




        public void Clear()
        {
            _clearNumberOfTimesCalled++;            

            
        }


// -------------- Contains ------------ 

private bool _containsReturnValue;

        private int _containsNumberOfTimesCalled;

        public T ContainsParameter_item_LastCalledWith;
        
        public virtual void ContainsSetReturnValue(bool value)
        {
            _containsReturnValue = value;
        }    


        public virtual bool ContainsWasCalled()
{
   return _containsNumberOfTimesCalled > 0;
}


public virtual bool ContainsWasCalled(int times)
{
   return _containsNumberOfTimesCalled == times;
}


public virtual int ContainsTimesCalled()
{
   return _containsNumberOfTimesCalled;
}


public virtual bool ContainsWasCalledWith(T item){
return (
item.Equals(ContainsParameter_item_LastCalledWith) );
}
 

             public bool Contains(T item)
        {
            _containsNumberOfTimesCalled++;            

            ContainsParameter_item_LastCalledWith = item;

            return _containsReturnValue;
        }

// -------------- CopyTo ------------


        private int _copyToNumberOfTimesCalled;        

        public T[] CopyToParameter_array_LastCalledWith;public int CopyToParameter_arrayIndex_LastCalledWith;

        public virtual bool CopyToWasCalled()
{
   return _copyToNumberOfTimesCalled > 0;
}


public virtual bool CopyToWasCalled(int times)
{
   return _copyToNumberOfTimesCalled == times;
}


public virtual int CopyToTimesCalled()
{
   return _copyToNumberOfTimesCalled;
}


public virtual bool CopyToWasCalledWith(T[] array, int arrayIndex){
return (
array.Equals(CopyToParameter_array_LastCalledWith)  && 
arrayIndex.Equals(CopyToParameter_arrayIndex_LastCalledWith) );
}


        public void CopyTo(T[] array, int arrayIndex)
        {
            _copyToNumberOfTimesCalled++;            

            CopyToParameter_array_LastCalledWith = array;CopyToParameter_arrayIndex_LastCalledWith = arrayIndex;
        }


// -------------- Remove ------------ 

private bool _removeReturnValue;

        private int _removeNumberOfTimesCalled;

        public T RemoveParameter_item_LastCalledWith;
        
        public virtual void RemoveSetReturnValue(bool value)
        {
            _removeReturnValue = value;
        }    


        public virtual bool RemoveWasCalled()
{
   return _removeNumberOfTimesCalled > 0;
}


public virtual bool RemoveWasCalled(int times)
{
   return _removeNumberOfTimesCalled == times;
}


public virtual int RemoveTimesCalled()
{
   return _removeNumberOfTimesCalled;
}


public virtual bool RemoveWasCalledWith(T item){
return (
item.Equals(RemoveParameter_item_LastCalledWith) );
}
 

             public bool Remove(T item)
        {
            _removeNumberOfTimesCalled++;            

            RemoveParameter_item_LastCalledWith = item;

            return _removeReturnValue;
        }}
}
